---
import MarkdownIt from 'markdown-it';
import { parse as parseHtml } from 'node-html-parser';

import WithProfileLayout from '@/layouts/WithProfile.astro';
import PostCard from '@/components/post/PostCard.astro';
import Footer from '@/components/Footer.vue';

const parser = MarkdownIt();
function getExcerpt(body: string) {
  const html = parser.render(body);
  const root = parseHtml(html);
  const text = root.getElementsByTagName('p')[0]?.text;
  if (!text || text.length <= 400) return text;
  return text.substring(0, 400) + ' ...';
}

const {
  title,
  desc,
  category,
  page,
  prefix,
} = Astro.props;

const posts = page.data.map(({ collection, id, body, data }) => ({
  collection: collection,
  id: id,
  excerpt: body ? getExcerpt(body) : '',
  title: data.title,
  desc: data.desc,
  date: data.date,
  tags: data.tags,
  banner_url: data.banner_url,
}));
---

<WithProfileLayout {title} {desc}>
  <main px-8>
    {/* Category */}
    { category && <h1 my-10 text-2xl>{category}</h1> }

    {/* Post List */}
    <div pb-3>
      { posts.map(post => <PostCard {...post} />) }
    </div>

    {/* Pagination */}
    <div flex justify-center items-center>
      <a
        mr-1
        class={page.url.prev ? '' : 'invisible'}
        href={page.url.prev}
      >
        <div i-mdi-triangle rotate-270></div>
      </a>
      {
        Array.from({ length: 5 }, (_, k) => k + page.currentPage - 2).map(num =>
          num <= 0 || num > page.lastPage ?
            <span mx-1 w-9 text-lg></span> :
          num == page.currentPage ?
            <span
              mx-1 w-9 h-9
              rounded-full border="2 pagination-indicator-light dark:pagination-indicator-dark"
              text="lg center"
            >
              {num}
            </span> :
            <a
              mx-1 w-9 h-9
              rounded-full border="2 transparent hover:pagination-indicator-hovered-light dark:hover:pagination-indicator-hovered-dark"
              transition="colors 2000"
              text="lg center"
              href={`${prefix}/${num}`}
            >
              {num}
            </a>
        )
      }
      <a
        ml-1
        class={page.url.next ? '' : 'invisible'}
        href={page.url.next}
      >
        <div i-mdi-triangle rotate-90></div>
      </a>
    </div>

    <Footer />
  </main>
</WithProfileLayout>